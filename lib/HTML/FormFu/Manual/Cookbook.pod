=head1 NAME

HTML::FormFu::Cookbook - Cooking with HTML::FormFu

=head1 DESCRIPTION

Miscellaneous useful recipes for use with HTML::FormFu

=head1 BASICS

Some useful info for beginners.

=head2 Installing the FormFu templates

Before doing anything else, make sure the FormFu templates have been set up on
your system. This can be done as follows:

  $ html_formfu_deploy.pl <output_path>

The output path will default to "./root" if not supplied on the command line.

=head2 Default search paths for config files and templates

The default locations for config files and templates are as follows:

=head3 Config files

The current working directory (see L<HTML::FormFu/"load config file">).

=head3 Templates

Subdirectory 'root' of the current working directory. In a default setup this is
set by C<HTML::FormFu::Render::base::xhtml()>. You can supply a different
template path as follows:

  $form->render_class_args( { INCLUDE_PATH => '/path/to/templates' } );

=head2 How to perform standalone testing of a form

When starting out with HTML::FormFu, you may want to test things from a script
rather than using a web framework like Catalyst. Something like the following
will help:

  #!/usr/bin/perl -w
  use strict;
  use HTML::FormFu;
  my( $config_file, $template_root ) = ( @ARGV );
  die "config file missing" if !defined $config_file;
  my $form = HTML::FormFu->new;
  # set template root if supplied on command line
  # will default to ./root otherwise
  $form->render_class_args( { INCLUDE_PATH => $template_root } )i
    if defined $template_root;
  $form->load_config_file( $config_file );
  print $form;

=head1 How do I...

=head2 Make my form output nicely formatted HTML?

Add this to your form config:

  ---
  output_processors:
    - Indent

=head2 Add a blank div to a form (e.g. for AJAX purposes)

Simply add a Block element in the relevant place.

  ---
  elements:
    - type: Block
      id: foo

The element's tag will default to C<&lt;div&gt;>.

=head2 Load my form config from a string instead of a file?

An example of where this might be useful is in a self contained test script.
Unfortunately, at the time of writing it's not as simple as doing:

  my $config = "
    ---
    elements:
      - name: foo
  ";
  $form->load_config( $config );

This is because HTML::FormFu uses L<Config::Any> behind the scenes when you call
C<HTML::FormFu/"load_config_file"> and this module only supports loading from
files. However, if you use YAML for your config files there are two workarounds.
Either:

  use HTML::FormFu;
  use YAML::Syck qw( Load );

  my $form = HTML::FormFu->new;

  $form->populate( Load( do { local $/; <DATA> } ) );

  print $form;

  __DATA__
  ---
  elements:
    - name: foo
    - name: bar

Or:

  use HTML::FormFu;
  use YAML::Syck qw( Load );

  my $form = HTML::FormFu->new;

  $form->populate( Load( <<END ) );
  ---
  elements:
    - name: foo
    - name: bar
  END

  print $form;

=head2 Produce an option group in a Radiogroup/Select element?

For example, you want HTML like the following:

  <form action="" method="post">
    <span class="select">
      <select name="month">
        <optgroup label="----Q1----">
          <option value="01">January</option>
          <option value="02">February</option>
          <option value="03">March</option>
        </optgroup>
        <optgroup label="----Q2----">
          <option value="04">April</option>
          <option value="05">May</option>
          <option value="06">June</option>
        </optgroup>
        <optgroup label="----Q3----">
          <option value="07">July</option>
          <option value="08">August</option>
          <option value="09">September</option>
        </optgroup>
        <optgroup label="----Q4----">
          <option value="10">October</option>
          <option value="11">November</option>
          <option value="12">December</option>
        </optgroup>
      </select>
    </span>
  </form>

The equivalent YAML is as follows:

  ---
  elements:
    - type: Select
      name: month
      options:
        - label: "----Q1----"
          group:
            - [01, January]
            - [02, February]
            - [03, March]
        - label: "----Q2----"
          group:
            - [04, April]
            - [05, May]
            - [06, June]
        - label: "----Q3----"
          group:
            - [07, July]
            - [08, August]
            - [09, September]
         - label: "----Q4----"
          group:
            - [10, October]
            - [11, November]
            - [12, December]

See also "options" in L<HTML::FormFu::Element::_Group/"options">.

=head2 Force an element to always have a certain value?

See the following:

L<HTML::FormFu::Element::_Field/"retain_default">
L<HTML::FormFu::Element::_Field/"force_default">

=head2 Set default values for several form fields at once using a hash?

For example, you want to do something like this:

  $form->set_default_values(
    {
      street => 'Bakerstreet',
      city => 'London'
    }
  );

One way is:

  $form->process( %hash );

But this has the (probably) unwanted side-effect of creating error messages for
failed constraints.

A method like C<set_default_values> could probably be incorporated into the main
code (I'm sure patches are welcome), but for now Mario Minati suggests the
following:

  # before calling $form->process
  my $hashref = { street => 'Bakerstreet', city => 'London'};
  map { $form->get_field( $_ )->default( $hashref->{$_} ) } keys $hashref;

=head2 Add a popup hint to a field?

Some visual browsers (including IE6/7, Firefox, Opera 9) display a tooltip when
a user hovers their mouse pointer over an HTML element with a "title" tag. Aural
browsers may try to turn the content into speech. You can take advantage of this
behaviour to provide a hint to the user about how to complete a form field.

  elements:
    - type: Text
      name: country_name
      label: Country Name
      attributes:
        title: Name of country

The above will provide a hint when the "country_name" field receives focus. You
could alter this so the hint is provided for the field's label instead:

  elements:
    - type: Text
      name: country_name
      label: Country Name
      label_attributes:
        title: Name of country

Or you could provide the hint for the container tag around both field and label
(by default this will be a C<&lt;span&gt;>):

  elements:
    - type: Text
      name: country_name
      label: Country Name
      container_attributes:
        title: Name of country (when not USA domestic)

=head2 Check Date fields for errors?

Attach a Date inflator to your date field. When the inflator is processed, it
will try to create a DateTime object. An error will be thrown if the supplied
values do not make a valid date and this will be returned to the user by
HTML::FormFu.

=head2 Insert a new field before existing form fields?

One way is to use C<insert_before>. Assuming the first field in your existing
form is "email" and you want to add "username" in front of it:

  my $fieldset = $form->get_element({ type => 'Fieldset' });
  $fieldset->insert_before(
    HTML::FormFu->new->element( { name => 'username' } ),
    $form->get_field('email')
  );

Another, cleaner way to approach the problem is to use multiple yaml files:

  # user_edit.yml
  ---
  elements:
    - type: Text
      name: email

  # user_username.yml
  ---
  elements:
    - type: Text
      name: username

   # user_register.yml
   ---
   load_config_file:
    - user_username.yml
    - user_edit.yml

  # create either a user edit form...
  $form->load_config_file( 'user_edit.yml' );

  # ...or a user registration form complete with "username" field at the top
  $form->load_config_file( 'user_register.yml' );

=head2 Know when to use a constraint and when to use a validator?

As Jason Kohles explains:

Generally a constraint is used for more low level information, and validators
for higher-level stuff. A good example is email addresses, an Email constraint
would check for things like "is this a string", "does it contain an @ sign",
"does it end with a valid top-level domain", and other things applicable to all
email addresses. Validators are usually used for more business-logic level
things, like a registration form might have an email validator that checks to
make sure the email address being registered doesn't already exist in the
database.

=head2 Implement a custom validator?

Create a custom validator class that inherits from L<HTML::FormFu::Validator>,
like this:

  package My::Custom::Validator;

  use strict;
  use warnings;

  use base 'HTML::FormFu::Validator';

  sub validate_value {
    my ( $self, $value, $params ) = @_;

    # check whether $value is valid here, according to your own criteria

    die HTML::FormFu::Exception::Validator->new
      if $value_is_invalid;

    # $value is valid
    return 1;
  }

  1;

Then add your custom validator to the form:

  # add validator only to form field named 'field1'
  $form->validator( { type => '+My::Custom::Validator', name => 'field1' } );

  # add validator to all form fields
  $form->validator( { type => '+My::Custom::Validator' } );
  # OR
  $form->validator( '+My::Custom::Validator' );

Note the prefix '+' in front of the custom validator's name - required in this
case because we are using a validator class from outside the
HTML::FormFu::Validator:: namespace.

=head2 Constrain one form field based on the value of another

For example, you have a radiogroup and several text fields, with different text
fields being required depending on the value of the radiogroup.

This is achieved using the C<when> attribute of a constraint:

  constraints:
    - type: Length
      min: 8
      when:
        field: bar
        values: [ 1, 3, 5 ]

In the above example, the Length constraint is only processed when the form
field named "bar" has a value of either 1, 3 or 5.

You can also test for a negative condition using the C<not> attribute:

  constraints:
    - type: Length
      min: 8
      when:
        field: bar
        values: [ 1, 3, 5 ]
        not: 1

Now the constraint will be processed only if the value of field "bar" is NOT 1,
3 or 5.

Both the above attributes are documented further in L<HTML::FormFu::Constraint>.

=head1 AUTHORS

Will Hawes C<wdhawes@gmail.com>

=head1 COPYRIGHT

This document is free, you can redistribute it and/or modify it
under the same terms as Perl itself.
